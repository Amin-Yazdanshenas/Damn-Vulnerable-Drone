title: Packet Sniffing
order: 5
description: Capturing MAVLink packets transmitted over the air to analyze drone communications.
breadcrumb:
  - text: Attack Scenarios
    link: /attacks
  - text: Reconnaissance
  - text: Packet Sniffing

sections:
  - title: Description
    content: |
      MAVLink packet sniffing involves intercepting the MAVLink messages exchanged between UAVs
      (Unmanned Aerial Vehicles) and ground control stations or between UAVs in a network.
      
      By analyzing the captured packets, you can
      gain insights into the drone's operational status, commands being sent or received, and
      how the system handles various data types.

  - title: Resources
    content:
      - text: Wireshark
        link: https://www.wireshark.org/

  - title: Solution
    collapsible: true
    steps:
      - title: Step 1
        description: |
          We will be using Wireshark to analyze the real-time MavLink traffic. This should already be installed with your Kali Linux distribution. If not, you can install it by following the documentation here: https://www.wireshark.org/download.html
      - title: Step 2
        description: |
          Install MAVLink on Kali (following the guide here: https://mavlink.io/en/getting_started/installation.html)
          ```sudo apt install python3 python3-pip
          git clone https://github.com/mavlink/mavlink.git --recursive
          cd mavlink
          python3 -m pip install -r pymavlink/requirements.txt
          ```
      - title: Step 3
        description: |
          Build libraries for your target dialect, specifying WLua as the target language. This process is described in the topic Generate MAVLink Libraries.
          ```python3 -m pymavlink.tools.mavgen --lang=WLua --wire-protocol=2.0 --output=mavlink_2_common message_definitions/v1.0/ardupilotmega.xml
          ```
      - title: Step 4
        description: |
          Update the plugin with correct ports (it should be configured correctly). The last few lines of the plugin file specify the ports to be monitored.
          ```local udp_dissector_table = DissectorTable.get("udp.port")
          udp_dissector_table:add(14550, mavlink_proto)
          udp_dissector_table:add(14580, mavlink_proto)
          udp_dissector_table:add(18570, mavlink_proto)
          ```
      - title: Step 5
        description: |
          To import the plugin into Wireshark:
          - Copy the plugin file into the wireshare plugins directory.
          - On Linux systems this might be: /usr/lib/x86_64-linux-gnu/wireshark or /usr/lib/aarch64-linux-gnu/wireshark or ~/.local/lib/wireshark/plugins or ~/.wireshark/plugins. Note that users will need to be added to the wireshark group to use the tool.)
          - Open Wireshark and follow the menu: Help > About Wireshark > Plugins

          You should find the plugin in the list. For example, with the plugin created in the previous section you would see mavlink_2_common.lua

      - title: Step 6
        description: |
          Start Wireshark and select the correct interface to monitor. You should see the MAVLink packets being captured in real-time.
