# MAVLink Scenarios

# Attitude Spoofing
############################################################
mavlink_connection.mav.attitude_send(time_boot_ms, roll, pitch, yaw, rollspeed, pitchspeed, yawspeed)
        """
        The attitude in the aeronautical frame (right-handed, Z-down, Y-right,
        X-front, ZYX, intrinsic).

        time_boot_ms              : Timestamp (time since system boot). [ms] (type:uint32_t)
        roll                      : Roll angle (-pi..+pi) [rad] (type:float)
        pitch                     : Pitch angle (-pi..+pi) [rad] (type:float)
        yaw                       : Yaw angle (-pi..+pi) [rad] (type:float)
        rollspeed                 : Roll angular speed [rad/s] (type:float)
        pitchspeed                : Pitch angular speed [rad/s] (type:float)
        yawspeed                  : Yaw angular speed [rad/s] (type:float)

        """
# GPS Spoofing
############################################################
mavlink_connection.mav.gps_input_send(    
          0,  # Timestamp (micros since boot or Unix epoch)
          0,  # ID of the GPS for multiple GPS inputs
          # Flags indicating which fields to ignore (see GPS_INPUT_IGNORE_FLAGS enum).
          # All other fields must be provided.
          8 | 16 | 32,
          0,  # GPS time (milliseconds from start of GPS week)
          0,  # GPS week number
          3,  # 0-1: no fix, 2: 2D fix, 3: 3D fix. 4: 3D with DGPS. 5: 3D with RTK
          latitude,  # Latitude (WGS84), in degrees * 1E7
          longitude,  # Longitude (WGS84), in degrees * 1E7
          depth,  # Altitude (AMSL, not WGS84), in m (positive for up)
          1,  # GPS HDOP horizontal dilution of position in m
          1,  # GPS VDOP vertical dilution of position in m
          0,  # GPS velocity in m/s in NORTH direction in earth-fixed NED frame
          0,  # GPS velocity in m/s in EAST direction in earth-fixed NED frame
          0,  # GPS velocity in m/s in DOWN direction in earth-fixed NED frame
          0,  # GPS speed accuracy in m/s
          0,  # GPS horizontal accuracy in m
          0,  # GPS vertical accuracy in m
          0   # Number of satellites visible
  )

# RECON
###############################

# Packet Deserialization in mavlink dev docs are needed to understanding mavlink message sniffing
Byte Index | C version | Content | Value | Explanation
--- | --- | --- | --- | ---
0 | `uint8_t magic`  | Packet start marker | 0xFD | Protocol-specific start-of-text (STX) marker used to indicate the beginning of a new packet. Any system that does not understand protocol version will skip the packet.
1 | `uint8_t len`    | Payload length | 0 - 255 | Indicates length of the following `payload` section. This may be affected by [payload truncation](#payload_truncation).
2 | `uint8_t incompat_flags` | [Incompatibility Flags](#incompat_flags) | | Flags that must be understood for MAVLink compatibility (implementation discards packet if it does not understand flag).
3 | `uint8_t compat_flags`   | [Compatibility Flags](#compat_flags) | | Flags that can be ignored if not understood (implementation can still handle packet even if it does not understand flag).
4 | `uint8_t seq`    | Packet sequence number | 0 - 255 | Used to detect packet loss. Components increment value for each message sent.
5 | `uint8_t sysid`  | System ID (sender)     | 1 - 255 | ID of *system* (vehicle) sending the message. Used to differentiate systems on network. Note that the broadcast address 0 may not be used in this field as it is an invalid *source* address.
6 | `uint8_t compid` | Component ID (sender)   | 1 - 255 | ID of *component* sending the message. Used to differentiate *components* in a *system* (e.g. autopilot and a camera). Use appropriate values in [MAV_COMPONENT](../messages/common.md#MAV_COMPONENT). Note that the broadcast address `MAV_COMP_ID_ALL` may not be used in this field as it is an invalid *source* address.
<span id="v2_msgid"></span>7 to 9 | `uint32_t msgid:24` | Message ID (low, middle, high bytes) | 0 - 16777215 | ID of *message type* in payload. Used to decode data back into message object.
<span id="v2_payload"></span>For _n_-byte payload:<br>`n=0`: NA, `n=1`: 10, `n>=2`: 10 to (9+n) | `uint8_t payload[max 255]` | [Payload](#payload) | | Message data. Depends on message type (i.e. Message ID) and contents.
(n+10) to (n+11) | `uint16_t checksum` | [Checksum](#checksum) (low byte, high byte) | | CRC-16/MCRF4XX for message (excluding `magic` byte). Includes [CRC_EXTRA](#crc_extra) byte.
(n+12) to (n+25) | `uint8_t signature[13]`| [Signature](../guide/message_signing.md) | | (Optional) Signature to ensure the link is tamper-proof.

# Determine Mavlink Version
This is the `<version>` field defined in the [Message Definitions](../messages/README.md) (`version` in [common.xml](../messages/common.md) for dialects that depend on the common message set).
The major version can be determined from the packet start marker byte: 
  * MAVLink 1: `0xFE` 
  * MAVLink 2: `0xFD`

# Look into mavlink2 and why they got rid of empty bute payloads???

